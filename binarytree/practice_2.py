##################################################################
# return the max depth of tree
##################################################################
def maxDepth(tree):
    pass

##################################################################
# return the min value in tree
##################################################################
def minValue(tree):
    pass

##################################################################
# return the max value in tree
##################################################################
def maxValue(tree):
    pass

##################################################################
# return the string of traversing tree in order
##################################################################
def inOrder(tree):
    pass

##################################################################
# return the string of traversing tree pre order
##################################################################
def preOrder(tree):
    pass

##################################################################
# return the string of traversing tree post order
##################################################################
def postOrder(tree):
    pass

##################################################################
# return the string of path to node with data
##################################################################
def pathToNode(tree, data):
    pass

##################################################################
# return True if any path of from root to leaf node have a sum 
# equal to num, False otherwise
##################################################################
def hasPathSum(tree, num):
    pass